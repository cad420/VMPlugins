
#ifndef _LVDHEADER_H_
#define _LVDHEADER_H_
#include <cstdint>
#include <memory>

#define LVD_HEADER_BUF_ORIGIN_OFFSET  0

#define LVD_HEADER_MAGIC_FILED_SIZE  4

#define LVD_DATA_WIDTH_FIELD_SIZE  4

#define LVD_DATA_HEIGHT_FIELD_SIZE  4

#define LVD_DATA_DEPTH_FIELD_SIZE  4

#define LVD_DATA_BLOCK_LENGTH_IN_LOG_FILED_SIZE  4

#define LVD_DATA_PADDING_FIELD_SIZE  4

#define LVD_DATA_ORIGINAL_WIDTH_FIELD_SIZE 4

#define LVD_DATA_ORIGINAL_HEIGHT_FIELD_SIZE 4

#define LVD_DATA_ORIGINAL_DEPTH_FIELD_SIZE 4

#define LVD_HEADER_MAGIC_FILED_OFFSET  (LVD_HEADER_BUF_ORIGIN_OFFSET)

#define LVD_DATA_WIDTH_FIELD_OFFSET  ((LVD_HEADER_MAGIC_FILED_OFFSET) + (LVD_HEADER_MAGIC_FILED_SIZE ))

#define LVD_DATA_HEIGHT_FIELD_OFFSET  ((LVD_DATA_WIDTH_FIELD_OFFSET) + (LVD_DATA_WIDTH_FIELD_SIZE ))

#define LVD_DATA_DEPTH_FIELD_OFFSET  ((LVD_DATA_HEIGHT_FIELD_OFFSET) + (LVD_DATA_HEIGHT_FIELD_SIZE))

#define LVD_BLOCK_LOG_FILED_OFFSET  ((LVD_DATA_DEPTH_FIELD_OFFSET) + (LVD_DATA_DEPTH_FIELD_SIZE))

#define LVD_BLOCK_PADDING_FIELD_OFFSET (( LVD_BLOCK_LOG_FILED_OFFSET  )+ (LVD_DATA_BLOCK_LENGTH_IN_LOG_FILED_SIZE))



#define LVD_DATA_ORIGINAL_WIDTH_FIELD_OFFSET  ((LVD_BLOCK_PADDING_FIELD_OFFSET) + (LVD_DATA_PADDING_FIELD_SIZE ))

#define LVD_DATA_ORIGINAL_HEIGHT_FIELD_OFFSET (( LVD_DATA_ORIGINAL_WIDTH_FIELD_OFFSET) +(LVD_DATA_ORIGINAL_WIDTH_FIELD_SIZE ))

#define LVD_DATA_ORIGINAL_DEPTH_FIELD_OFFSET  ((LVD_DATA_ORIGINAL_HEIGHT_FIELD_OFFSET) + (LVD_DATA_ORIGINAL_HEIGHT_FIELD_SIZE))

#define LVD_HEADER_SIZE ((LVD_DATA_ORIGINAL_DEPTH_FIELD_OFFSET) +(LVD_DATA_ORIGINAL_DEPTH_FIELD_SIZE ))

namespace lz4filereader
{

	class LVDHeader
	{
		std::unique_ptr<unsigned char[]> buf;
		static constexpr int BufSize = 64;
	public:
		uint32_t magicNum;
		uint32_t dataDim[3];
		uint32_t blockLengthInLog;
		uint32_t padding;
		uint32_t originalDataDim[3];
	public:
		LVDHeader();
		int HeaderSize()const;
		void Decode(unsigned char* buf);
		unsigned char* Encode();
	};

	inline LVDHeader::LVDHeader():buf(new unsigned char[BufSize])
	{
		
	}

	inline int LVDHeader::HeaderSize() const
	{
		return LVD_HEADER_SIZE;
	}

	inline void LVDHeader::Decode(unsigned char* p)
	{
		memcpy((&magicNum), p + (LVD_HEADER_MAGIC_FILED_OFFSET), (LVD_HEADER_MAGIC_FILED_SIZE));
		memcpy(&dataDim[0], p + LVD_DATA_WIDTH_FIELD_OFFSET, LVD_DATA_WIDTH_FIELD_SIZE);
		memcpy(&dataDim[1], p + LVD_DATA_HEIGHT_FIELD_OFFSET, LVD_DATA_HEIGHT_FIELD_SIZE);
		memcpy(&dataDim[2], p + LVD_DATA_DEPTH_FIELD_OFFSET, LVD_DATA_DEPTH_FIELD_SIZE);
		memcpy(&blockLengthInLog, p + LVD_BLOCK_LOG_FILED_OFFSET, LVD_DATA_BLOCK_LENGTH_IN_LOG_FILED_SIZE);
		memcpy(&padding, p + LVD_BLOCK_PADDING_FIELD_OFFSET, LVD_DATA_PADDING_FIELD_SIZE);
		memcpy(&originalDataDim[0], p + LVD_DATA_ORIGINAL_WIDTH_FIELD_OFFSET, LVD_DATA_ORIGINAL_WIDTH_FIELD_OFFSET);
		memcpy(&originalDataDim[1], p + LVD_DATA_ORIGINAL_HEIGHT_FIELD_OFFSET, LVD_DATA_ORIGINAL_HEIGHT_FIELD_OFFSET);
		memcpy(&originalDataDim[2], p + LVD_DATA_ORIGINAL_DEPTH_FIELD_OFFSET, LVD_DATA_ORIGINAL_DEPTH_FIELD_OFFSET);
	}

	inline unsigned char* LVDHeader::Encode()
	{
		const auto p = buf.get();
		memcpy(p + (LVD_HEADER_MAGIC_FILED_OFFSET), (&magicNum), (LVD_HEADER_MAGIC_FILED_SIZE));
		memcpy(p + LVD_DATA_WIDTH_FIELD_OFFSET, &dataDim[0], LVD_DATA_WIDTH_FIELD_SIZE);
		memcpy(p + LVD_DATA_HEIGHT_FIELD_OFFSET, &dataDim[1], LVD_DATA_HEIGHT_FIELD_SIZE);
		memcpy(p + LVD_DATA_DEPTH_FIELD_OFFSET, &dataDim[2], LVD_DATA_DEPTH_FIELD_SIZE);
		memcpy(p + LVD_BLOCK_LOG_FILED_OFFSET, &blockLengthInLog, LVD_DATA_BLOCK_LENGTH_IN_LOG_FILED_SIZE);
		memcpy(p + LVD_BLOCK_PADDING_FIELD_OFFSET, &padding, LVD_DATA_PADDING_FIELD_SIZE);
		memcpy(p + LVD_DATA_ORIGINAL_WIDTH_FIELD_OFFSET, &originalDataDim[0], LVD_DATA_ORIGINAL_WIDTH_FIELD_OFFSET);
		memcpy(p + LVD_DATA_ORIGINAL_HEIGHT_FIELD_OFFSET, &originalDataDim[1], LVD_DATA_ORIGINAL_HEIGHT_FIELD_OFFSET);
		memcpy(p + LVD_DATA_ORIGINAL_DEPTH_FIELD_OFFSET, &originalDataDim[2], LVD_DATA_ORIGINAL_DEPTH_FIELD_OFFSET);
		return p;
	}
}


#endif